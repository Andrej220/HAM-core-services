=== ./app-core/kustomization.yaml ===
apiVersion: kustomize.config.k8s.io/v1beta1
kind: Kustomization
resources:
  - application-db-init.yaml
  - application-mongodb.yaml
  - application-postgresql.yaml
  - application-storage.yaml

=== ./app-core/application-storage.yaml ===
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: storage
  namespace: argocd
  annotations:
    argocd.argoproj.io/sync-wave: "-1"
spec:
  project: default
  source:
    repoURL: https://github.com/Andrej220/HAM-core-services
    targetRevision: HEAD
    path: manifests/storage
  destination:
    server: https://kubernetes.default.svc
    namespace: database-test  
  syncPolicy:
    automated:
      selfHeal: true
      prune: true


=== ./app-core/application-db-init.yaml ===
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: db-init
  namespace: argocd
  annotations:
    argocd.argoproj.io/sync-wave: "1"
spec:
  project: default
  source:
    repoURL: https://github.com/Andrej220/HAM-core-services
    targetRevision: HEAD
    path: manifests/db-init
  destination:
    server: https://kubernetes.default.svc
    namespace: database-test
  syncPolicy:
    automated:
      selfHeal: true
      prune: true

=== ./app-core/application-postgresql.yaml ===
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: postgresql
  namespace: argocd
  annotations:
    argocd.argoproj.io/sync-wave: "0"
spec:
  project: default
  source:
    repoURL: https://charts.bitnami.com/bitnami
    chart: postgresql
    targetRevision: 15.5.8
    helm:
      valueFiles:
        - https://raw.githubusercontent.com/Andrej220/HAM-core-services/HEAD/apps/postgresql/values.yaml
  destination:
    server: https://kubernetes.default.svc
    namespace: database-test
  syncPolicy:
    automated:
      selfHeal: true
      prune: true
    syncOptions:
      - CreateNamespace=true
  dependsOn:
    - name: ham-core
      namespace: argocd

=== ./app-core/application-mongodb.yaml ===
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: mongodb
  namespace: argocd
  annotations:
    argocd.argoproj.io/sync-wave: "0"
spec:
  project: default
  source:
    repoURL: registry-1.docker.io/bitnamicharts
    chart: mongodb
    targetRevision: 16.4.12
    helm:
      valueFiles:
        - https://raw.githubusercontent.com/Andrej220/HAM-core-services/HEAD/apps/mongodb/values.yaml
  destination:
    server: https://kubernetes.default.svc
    namespace: database-test
  syncPolicy:
    automated:
      selfHeal: true
      prune: true
    syncOptions:
      - CreateNamespace=true
  dependsOn:
    - name: ham-core
      namespace: argocd

=== ./root/kustomization.yaml ===
apiVersion: kustomize.config.k8s.io/v1beta1
kind: Kustomization
resources:
  - ../app-core
  - ../manifests/storage

=== ./apps/postgresql/values.yaml ===
auth:
  postgresPassword: password

primary:
  persistence:
    storageClass: local-path
    size: 10Gi
  podManagementPolicy: OrderedReady
persistentVolumeClaimRetentionPolicy:  
  whenDeleted: Retain
  whenScaled: Retain

=== ./apps/storage/application-storage.yaml ===
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: storage
  namespace: argocd
  annotations:
    argocd.argoproj.io/sync-wave: "-1"
spec:
  project: default
  source:
    repoURL: https://github.com/Andrej220/HAM-core-services
    targetRevision: HEAD
    path: manifests/storage
  destination:
    server: https://kubernetes.default.svc
    namespace: database-test  
  syncPolicy:
    automated:
      selfHeal: true
      prune: true


=== ./apps/mongodb/values.yaml ===
auth:
  rootPassword: password
  username: appuser
  password: apppassword
  database: appdb

persistence:
  storageClass: local-path
  size: 10Gi

=== ./apps/ db-init/application-db-init.yaml ===
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: db-init
  namespace: argocd
  annotations:
    argocd.argoproj.io/sync-wave: "1"
spec:
  project: default
  source:
    repoURL: https://github.com/Andrej220/HAM-core-services
    targetRevision: HEAD
    path: manifests/db-init
  destination:
    server: https://kubernetes.default.svc
    namespace: database-test
  syncPolicy:
    automated:
      selfHeal: true
      prune: true


=== ./sum.sh ===
#!/bin/bash

# Output file
OUTPUT_FILE="summary.txt"

# Clear the output file if it exists
> "$OUTPUT_FILE"

# Find all files and process them
find . -type f -not -path '*/.git/*' -not -name "summary.txt" -not -name "summarize.sh" | while IFS= read -r file; do
    echo "=== $file ===" >> "$OUTPUT_FILE"
    cat "$file" >> "$OUTPUT_FILE"
    echo -e "\n" >> "$OUTPUT_FILE"
done

echo "Summary generated in $OUTPUT_FILE"


=== ./summary.sh ===
#!/bin/bash
set -x
# Output file
OUTPUT_FILE="summary.txt"

# Clear the output file if it exists
#> "$OUTPUT_FILE"

# Function to process each file
process_file() {
    local file="$1"
    # Skip directories and the script itself
    if [[ -f "$file" && "$file" != "$0" && "$file" != "$OUTPUT_FILE" ]]; then
        echo "=== $file ===" >> "$OUTPUT_FILE"
        cat "$file" >> "$OUTPUT_FILE"
        echo -e "\n" >> "$OUTPUT_FILE"
    fi
}

# Export the function so find can use it
export -f process_file

# Find all files and process them
find . -type f -exec bash -c 'process_file "$0"' {} \;

echo "Summary generated in $OUTPUT_FILE"


=== ./manifests/storage/raid10-storage.yaml ===
---
apiVersion: v1
kind: Namespace
metadata:
  name: database-test
---
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: raid10-storage
provisioner: kubernetes.io/no-provisioner
volumeBindingMode: WaitForFirstConsumer
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: pv-raid10-postgresql
spec:
  capacity:
    storage: 10Gi
  volumeMode: Filesystem
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  storageClassName: raid10-storage
  local:
    path: /mnt/raid10/postgresql
  nodeAffinity:
    required:
      nodeSelectorTerms:
        - matchExpressions:
            - key: kubernetes.io/hostname
              operator: In
              values:
                - ds-node1

=== ./manifests/storage/kustomization.yaml ===
resources:
  #- database-test-namespace.yaml
  - raid10-storage.yaml


=== ./manifests/storage/database-test-namespace.yaml ===
---
apiVersion: v1
kind: Namespace
metadata:
  name: database-test

=== ./manifests/db-init/mongodb-secret.yaml ===
apiVersion: v1
kind: Secret
metadata:
  name: mongodb-secret
  namespace: database-test
type: Opaque
stringData:
  mongodb-root-password: your-root-password
  mongodb-password: apppassword
---
apiVersion: v1
kind: Secret
metadata:
  name: postres-secret
  namespace: database-test
type: Opaque
stringData:
  postgresPassword: password

=== ./manifests/db-init/init-configmap.yaml ===
apiVersion: v1
kind: ConfigMap
metadata:
  name: init-scripts
  namespace: database-test
data:
  init.sql: |
    -- SQL example
    CREATE TABLE customers (
      id SERIAL PRIMARY KEY,
      name TEXT NOT NULL,
      location TEXT
    );

    CREATE TABLE systems (
      id SERIAL PRIMARY KEY,
      customer_id INTEGER REFERENCES customers(id),
      hostname TEXT,
      ip_address TEXT,
      port INTEGER,
      login TEXT
    );

  init.py: |
    from pymongo import MongoClient
    from datetime import datetime

    mongo = MongoClient("mongodb://appuser:apppassword@mongodb.database-test.svc.cluster.local:27017/appdb")
    db = mongo["appdb"]
    collection = db["host_results"]

    collection.insert_one({
        "system_id": 1,
        "executed_at": datetime.utcnow(),
        "result": {
            "id": "root",
            "fields": []
        }
    })


=== ./manifests/db-init/init-job.yaml ===
apiVersion: batch/v1
kind: Job
metadata:
  name: init-databases
  namespace: database-test
spec:
  backoffLimit: 6  
  completions: 1   
  parallelism: 1   
  template:
    spec:
      restartPolicy: Never  
      containers:
      - name: init
        image: python:3.10
        command:
          - "sh"
          - "-c"
          - |
            apt update && apt install -y postgresql-client && \
            pip install psycopg2-binary pymongo && \
            psql -h postgresql -U postgres -d postgres -f /scripts/init.sql && \
            python3 /scripts/init.py
        env:
        - name: PGPASSWORD
          value: "password"  
        volumeMounts:
        - name: script-volume
          mountPath: /scripts
      volumes:
      - name: script-volume
        configMap:
          name: init-scripts  

